DEFINITION MODULE UTF8;

(* This module implements UTF-8 utility procedures. *)

PROCEDURE IsUtf8Exception(): BOOLEAN;
(* Returns TRUE if the current exception is a UTF-8 related error *)

PROCEDURE CharLen(firstByte: CHAR): CARDINAL;
(* Returns the number of bytes in a UTF-8 character starting with firstByte *)
(* Raises an exception if the first byte is not a valid UTF-8 start byte. *)

PROCEDURE IsValid(buf: ARRAY OF CHAR; len: CARDINAL): BOOLEAN;
(* Returns TRUE if buf[0..len-1] is valid UTF-8 *)

PROCEDURE SkipBOM(VAR buf: ARRAY OF CHAR; VAR len: CARDINAL);
(* If BOM is present at start, advances buf/len past it *)

PROCEDURE CodePointToUTF8(codePoint: CARDINAL; VAR buffer: ARRAY OF CHAR; VAR bytesWritten: CARDINAL): BOOLEAN;
(* Converts a Unicode code point to UTF-8 and writes it to buffer.
   Returns TRUE if successful, FALSE if the code point is invalid or buffer is too small. *)

PROCEDURE NextCodePoint(VAR byteArray: ARRAY OF CHAR; VAR index: CARDINAL; VAR codePoint: CARDINAL): BOOLEAN;
(* Reads the next UTF-8 character (code point) from a byte array, advances the index, and returns the code point.  *)
(* Returns FALSE if the end of the array is reached or an invalid sequence is encountered. *)

PROCEDURE PrevCodePoint(VAR byteArray: ARRAY OF CHAR; VAR index: CARDINAL; VAR codePoint: CARDINAL): BOOLEAN;
(* Similar to NextCodePoint but reads the previous code point by moving backward from the current index. *)

END UTF8.